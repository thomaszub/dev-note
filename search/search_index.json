{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dev Note Notes about various topics in software development.","title":"Introduction"},{"location":"#dev-note","text":"Notes about various topics in software development.","title":"Dev Note"},{"location":"agile_methods/","text":"Agile methods This note contains informations about agile methods.","title":"Agile methods"},{"location":"agile_methods/#agile-methods","text":"This note contains informations about agile methods.","title":"Agile methods"},{"location":"agile_methods/invest/","text":"INVEST The INVEST mnemonic stands for six characteristics for a work item. I ndependent N egotiable V aluable E stimable S mall T estable","title":"INVEST"},{"location":"agile_methods/invest/#invest","text":"The INVEST mnemonic stands for six characteristics for a work item. I ndependent N egotiable V aluable E stimable S mall T estable","title":"INVEST"},{"location":"design_pattern/","text":"Design pattern This note contains informations about design patterns, mainly from the book \"Design Patterns\" from the Gang of Four.","title":"Design pattern"},{"location":"design_pattern/#design-pattern","text":"This note contains informations about design patterns, mainly from the book \"Design Patterns\" from the Gang of Four.","title":"Design pattern"},{"location":"design_pattern/behavioral/","text":"Behavioral Behavioral design patterns describe the communications between objects in a system.","title":"Behavioral"},{"location":"design_pattern/behavioral/#behavioral","text":"Behavioral design patterns describe the communications between objects in a system.","title":"Behavioral"},{"location":"design_pattern/behavioral/observer/","text":"Observer The observer is publish-subscribe-pattern typically found in event-driven systems. The observable maintains a list of observers and notifies them on events like changes in state. sequenceDiagram participant Observable participant Observer1 participant Observer2 Observer1->>Observable: register Observer2->>Observable: register Note over Observable: Event occurs in Observable Observable->>Observer1: update(Event) Observable->>Observer2: update(Event) Weak reference In the case that the observable holds a strong reference to an observer, the observer would not be cleaned up by e.g garbage collection or reference counting if its life cycle ends. This can be solved by weak references.","title":"Observer"},{"location":"design_pattern/behavioral/observer/#observer","text":"The observer is publish-subscribe-pattern typically found in event-driven systems. The observable maintains a list of observers and notifies them on events like changes in state. sequenceDiagram participant Observable participant Observer1 participant Observer2 Observer1->>Observable: register Observer2->>Observable: register Note over Observable: Event occurs in Observable Observable->>Observer1: update(Event) Observable->>Observer2: update(Event)","title":"Observer"},{"location":"design_pattern/behavioral/observer/#weak-reference","text":"In the case that the observable holds a strong reference to an observer, the observer would not be cleaned up by e.g garbage collection or reference counting if its life cycle ends. This can be solved by weak references.","title":"Weak reference"},{"location":"design_pattern/behavioral/visitor/","text":"Visitor The visitor pattern separates algorithms from the object structures they work on. If supported, this can be done by double dispatch or reflection.","title":"Visitor"},{"location":"design_pattern/behavioral/visitor/#visitor","text":"The visitor pattern separates algorithms from the object structures they work on. If supported, this can be done by double dispatch or reflection.","title":"Visitor"},{"location":"microservices/","text":"Microservices","title":"Microservices"},{"location":"microservices/#microservices","text":"","title":"Microservices"},{"location":"microservices/service_interaction/","text":"Service interaction This note describes interaction procedures used in microservice architectures. Choreography In the choreography each service knows its role in a business process and therefore all following services it has to call. sequenceDiagram participant Service1 participant Service2 participant Service3 Service1->>Service2: request Service1->>Service3: request Service3->>Service2: request Note : Response side suppressed for clarity. Orchestration In the orchestration a business process is executed by a central coordinator. The services itself do not have to know the underlying business process. sequenceDiagram participant Coordinator participant Service1 participant Service2 participant Service3 Coordinator->>Service1: request Coordinator->>Service2: request Coordinator->>Service3: request Coordinator->>Service2: request Note : Response side suppressed for clarity.","title":"Service interaction"},{"location":"microservices/service_interaction/#service-interaction","text":"This note describes interaction procedures used in microservice architectures.","title":"Service interaction"},{"location":"microservices/service_interaction/#choreography","text":"In the choreography each service knows its role in a business process and therefore all following services it has to call. sequenceDiagram participant Service1 participant Service2 participant Service3 Service1->>Service2: request Service1->>Service3: request Service3->>Service2: request Note : Response side suppressed for clarity.","title":"Choreography"},{"location":"microservices/service_interaction/#orchestration","text":"In the orchestration a business process is executed by a central coordinator. The services itself do not have to know the underlying business process. sequenceDiagram participant Coordinator participant Service1 participant Service2 participant Service3 Coordinator->>Service1: request Coordinator->>Service2: request Coordinator->>Service3: request Coordinator->>Service2: request Note : Response side suppressed for clarity.","title":"Orchestration"}]}